# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # TODO: Change 
      - name: Compress project files
        run: tar -czf www.tar.gz www 

      - name: Setup ssh for server transfers
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          STAGING_DIR: ${{ secrets.STAGING_DIR }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p 7822 $SSH_HOST >> ~/.ssh/known_hosts

      - name: Transfer, decompress, move, compress, and cleanup on Staging
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          STAGING_DIR: ${{ secrets.STAGING_DIR }}
        run: |
          git clone ssh://$SSH_USERNAME@$SSH_HOST:7822/home/mattrutt/public_html /tmp/repo
          cd /tmp/repo

          # Add a test file
          echo "This is a test file" > test-file.txt

          # Stage the test file for commit
          git add .

          # Get the commit hash and timestamp from the GitHub commit
          GITHUB_COMMIT_HASH=${{ github.sha }}
          COMMITTER_NAME=${{ github.actor }}
          TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S')

          # Commit with the commit hash and timestamp
          git commit -m "Commit from GitHub by $COMMITTER_NAME: $GITHUB_COMMIT_HASH at $TIMESTAMP"

          # Push the changes back to the remote server
          git push origin master

      - name: Transfer, decompress, move, compress, and cleanup on Production
        if: startsWith(github.ref, 'refs/tags/')  # This condition ensures this step runs only for tags
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          PROD_DIR: ${{ secrets.PROD_DIR }}
        run: |
          scp -P 7822 www.tar.gz $SSH_USERNAME@$SSH_HOST:$PROD_DIR
          ssh -p 7822 $SSH_USERNAME@$SSH_HOST "
            cd $PROD_DIR &&

            # Remove all the files and directories except .tar.gz files using rm and wildcards
            shopt -s extglob
            rm -rf ./!(*.tar.gz)

            # Decompress .tar.gz
            tar -xzf www.tar.gz -C ./ &&
            mv -f www/* ./ &&
            rm -rf www www.tar.gz
          "

      - name: Cleanup Artifacts
        run: rm -f www.tar.gz